# Summary:
# TODO
#
# LEARN MORE AT https://unlyed.github.io/next-right-now/guides/ci-cd/
#
# Dependencies overview:
# - See https://github.com/actions/setup-node https://github.com/actions/setup-node/tree/v1
# - See https://github.com/actions/checkout https://github.com/actions/checkout/tree/v1
# - See https://github.com/rlespinasse/github-slug-action https://github.com/rlespinasse/github-slug-action/tree/3.x
# - See https://github.com/jwalton/gh-find-current-pr https://github.com/jwalton/gh-find-current-pr/tree/v1
# - See https://github.com/peter-evans/create-or-update-comment https://github.com/peter-evans/create-or-update-comment/tree/v1

name: Deploy Storybook static site to Vercel

on:
  # There are several ways to trigger Github actions - See https://help.github.com/en/actions/reference/events-that-trigger-workflows#example-using-a-single-event for a comprehensive list:
  # - "push": Triggers each time a commit is pushed
  # - "pull_request": Triggers each time a commit is pushed within a pull request, it makes it much easier to write comments within the PR, but it suffers some strong limitations:
  #   - There is no way to trigger when a PR is merged into another - See https://github.community/t/pull-request-action-does-not-run-on-merge/16092?u=vadorequest
  #   - It won't trigger when the PR is conflicting with its base branch - See https://github.community/t/run-actions-on-pull-requests-with-merge-conflicts/17104/2?u=vadorequest
  push: # Triggers on each pushed commit
    branches:
      - '*'

jobs:
  # Configures the deployment environment, install dependencies (like node, npm, etc.) that are requirements for the upcoming jobs
  # Ex: Necessary to run `yarn deploy`
  setup-environment:
    name: Setup deployment environment (Ubuntu 18.04 - Node 12.x)
    runs-on: ubuntu-18.04
    steps:
      - name: Installing node.js
        uses: actions/setup-node@v1 # Used to install node environment - https://github.com/actions/setup-node
        with:
          node-version: '12.x' # Use the same node.js version as the one Vercel's uses (currently node12.x)

  # Starts a Vercel deployment, using the storybook configuration file
  # N.B: It's Vercel that will perform the actual deployment
  start-deployment:
    name: Starts Vercel deployment (Ubuntu 18.04)
    runs-on: ubuntu-18.04
    needs: setup-environment
    steps:
      - uses: actions/checkout@v1 # Get last commit pushed - See https://github.com/actions/checkout

      - name: Expose GitHub slug/short variables # See https://github.com/rlespinasse/github-slug-action#exposed-github-environment-variables
        uses: rlespinasse/github-slug-action@v3.x # See https://github.com/rlespinasse/github-slug-action

      - name: Deploying on Vercel
        # Workflow overview:
        #   - TODO
        run: |
          # Print the version of the "vercel" CLI being used (helps debugging)
          vercel --version
          echo "Current branch: ${GITHUB_REF_SLUG}"

          echo "Installing dependencies"
          yarn install

          echo "Building and deploying StoryBook static site"

          # Deploy the customer on Vercel using the customer ref
          # Store the output in a variable so we can extract metadata from it
          VERCEL_DEPLOYMENT_OUTPUT=`yarn deploy:sb:gha --token $VERCEL_TOKEN`

          # Extract the Vercel deployment url from the deployment output
          VERCEL_DEPLOYMENT_URL=`echo $VERCEL_DEPLOYMENT_OUTPUT | egrep -o 'https?://[^ ]+.vercel.app'`
          echo "Deployment url: " $VERCEL_DEPLOYMENT_URL
          echo "VERCEL_DEPLOYMENT_URL=$VERCEL_DEPLOYMENT_URL" >> $GITHUB_ENV
          echo "VERCEL_DEPLOYMENT_DOMAIN=${VERCEL_DEPLOYMENT_URL#https://}" >> $GITHUB_ENV

          # Find all custom aliases configured in the customer deployment configuration file (vercel.json)
          VERCEL_DEPLOYMENT_ALIASES_JSON=$(cat vercel.storybook.json | jq --raw-output '.alias')
          echo "Custom aliases: " $VERCEL_DEPLOYMENT_ALIASES_JSON

          # Convert the JSON array into a bash array - See https://unix.stackexchange.com/a/615717/60329
          readarray -t VERCEL_DEPLOYMENT_ALIASES < <(jq --raw-output '.alias[]' < vercel.storybook.json)

          # Count the number of element in the array, will be 0 if it's an empty array, or if the "alias" key wasn't defined
          VERCEL_DEPLOYMENT_ALIASES_COUNT=${#VERCEL_DEPLOYMENT_ALIASES[@]}

          # Check if there are no aliases configured
          if [ "$VERCEL_DEPLOYMENT_ALIASES" > 0 ]
          then
            echo "$VERCEL_DEPLOYMENT_ALIASES_COUNT alias(es) found. Aliasing them now..."

            # For each alias configured, then assign it to the deployed domain
            for DEPLOYMENT_ALIAS in "${VERCEL_DEPLOYMENT_ALIASES[@]}"; do
              echo "npx vercel alias "$VERCEL_DEPLOYMENT_URL $DEPLOYMENT_ALIAS
              npx vercel alias $VERCEL_DEPLOYMENT_URL $DEPLOYMENT_ALIAS --token $VERCEL_TOKEN || echo "Aliasing failed for '$DEPLOYMENT_ALIAS', but the build will continue regardless."
            done
          else
            # $VERCEL_DEPLOYMENT_ALIASES is null, this happens when it was not defined in the vercel.json file
            echo "There are no more aliases to configure. You can add more aliases from your vercel.json 'alias' property. See https://vercel.com/docs/configuration?query=alias%20domain#project/alias"
            echo "$VERCEL_DEPLOYMENT_ALIASES"
          fi
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }} # Passing github's secret to the worker
          # Passing exposed GitHub environment variables - See https://github.com/rlespinasse/github-slug-action#exposed-github-environment-variables
          GITHUB_REF_SLUG: ${{ env.GITHUB_REF_SLUG }}

      # We need to find the PR id. Will be used later to comment on that PR.
      - name: Finding Pull Request ID
        uses: jwalton/gh-find-current-pr@v1 # See https://github.com/jwalton/gh-find-current-pr
        id: pr_id_finder
        if: always() # It forces the job to be always executed, even if a previous job fail.
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # On deployment failure, add a comment to the PR, if there is an open PR for the current branch
      - name: Comment PR (Deployment failure)
        uses: peter-evans/create-or-update-comment@v1 # See https://github.com/peter-evans/create-or-update-comment
        if: steps.pr_id_finder.outputs.number && failure()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.pr_id_finder.outputs.number }}
          body: |
            :x:&nbsp; Deployment **FAILED**
            Commit ${{ github.sha }} failed to deploy **Storybook static site** to [${{ env.VERCEL_DEPLOYMENT_URL }}](${{ env.VERCEL_DEPLOYMENT_URL }})
            [click to see logs](https://github.com/UnlyEd/next-right-now/pull/${{ steps.pr_id_finder.outputs.number }}/checks)

      # On deployment success, add a comment to the PR, if there is an open PR for the current branch
      - name: Comment PR (Deployment success)
        uses: peter-evans/create-or-update-comment@v1 # See https://github.com/peter-evans/create-or-update-comment
        if: steps.pr_id_finder.outputs.number && success()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.pr_id_finder.outputs.number }}
          body: |
            :white_check_mark:&nbsp; Deployment **SUCCESS**
            Commit ${{ github.sha }} successfully deployed **Storybook static site** to [${{ env.VERCEL_DEPLOYMENT_URL }}](${{ env.VERCEL_DEPLOYMENT_URL }})
            Deployment aliased as [nrn-v2-mst-aptd-at-lcz-sty-storybook](https://nrn-v2-mst-aptd-at-lcz-sty-storybook.vercel.app)
